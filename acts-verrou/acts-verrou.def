Bootstrap: localimage
From: /home/hadrien/Software/singularity-images/acts-Debug.sif

%files
    excludes.ex /root
    run.sh      /root
    cmp.sh      /root

%post
    # Bring in the run-time environment (we need it at build time too...)
    source ${SINGULARITY_ENVIRONMENT}

    # === INSTALL VERROU ===

    # Install Verrou
    spack install verrou@2.1.0 ^ python -pythoncmd

    # Bring Python, Verrou, and Verrou's python extensions in global scope
    spack activate verrou
    spack load python@3 -pythoncmd
    spack load verrou
    echo "spack load python@3 -pythoncmd" >> ${SINGULARITY_ENVIRONMENT}
    echo "spack load verrou" >> ${SINGULARITY_ENVIRONMENT}

    # === SETUP AN ACTS DEVELOPMENT ENVIRONMENT ===

    # Drop the parent ACTS install, we'll be building a new one anyway
    spack uninstall -y ${ACTS_SPACK_SPEC}

    # Start working on a development branch of ACTS
    cd /root
    git clone https://gitlab.cern.ch/hgraslan/acts-core.git
    spack diy -d acts-core ${ACTS_SPACK_SPEC}

    # These environment variables should really exist at the %files stage...
    ACTS_SOURCE_DIR=/root/acts-core
    ACTS_BUILD_DIR=${ACTS_SOURCE_DIR}/spack-build

    # === TEST ACTS USING VERROU'S RANDOM-ROUNDING MODE ===

    # Bring in the Verrou exclusions
    mv /root/excludes.ex ${ACTS_BUILD_DIR}/

    # Record the part of the verrou command line which we'll use everywhere
    VERROU_CMD_BASE="valgrind --tool=verrou                                    \
                              --rounding-mode=random                           \
                              --demangle=no                                    \
                              --exclude=${ACTS_BUILD_DIR}/excludes.ex"

    # Run the ACTS test suite inside of Verrou, in verbose & single-thread mode
    cd ${ACTS_BUILD_DIR}
    spack load cmake
    ${VERROU_CMD_BASE} --trace-children=yes ctest -V

    # Run the integration tests inside of Verrou
    cd ${ACTS_BUILD_DIR}/Tests/Integration
    ${VERROU_CMD_BASE} ./PropagationTests
    ${VERROU_CMD_BASE} ./SeedingTest

    # Delta-debug an ACTS unit tests to find out in which ELF symbols Verrou
    # perturbations will cause a test failure.
    #
    # This is an easy way to locate instabilities, which can then be classified
    # as genuine numerical problems or false-positives and be fixed or excluded
    # accordingly. The provided exclude list was generated via this process.
    #
    # NOTE: In principle, delta-debugging should go down to the granularity of
    #       individual source lines, but this currently fails. I think that is
    #       because the instabilities are in the libm and I do not have
    #       debugging symbols for that. But since we already know that the libm
    #       trigonometric function instabilities are a false alarm, this is not
    #       really an issue.
    #
    mv /root/run.sh /root/cmp.sh ${ACTS_BUILD_DIR}/
    cd ${ACTS_BUILD_DIR}
    chmod +x run.sh cmp.sh
    verrou_dd run.sh cmp.sh

    # === CLEAN UP BEFORE PUSHING ===

    # Get rid of the largest delta-debugging artifacts
    cd ${ACTS_BUILD_DIR}/Tests/Integration
    rm -rf dd.sym dd.line

    # Discard the ACTS source directory to save space
    #
    # We do not event keep the source like we do in Docker, because /root will
    # not be available for writing in Singularity's user-mode model.
    #
    rm -rf ${ACTS_SOURCE_DIR}

    # Discard the ACTS install (otherwise user won't be able to rebuild another)
    spack uninstall -y ${ACTS_SPACK_SPEC}

    # Save up space
    spack clean -a

%help
    This container features a Verrou-based ACTS validation setup.